*Anonymous Functions*
Rust's closures are anonymous functions that can be saved in variables or passed
as arguments

= Creating an Abstraction of Behavior with Closures =
== Syntax ==
{{{rust
|input_value1, input_value2| {
  // closure logic
}
}}}

* The syntax was chosen to be similar to SmallTalk and Ruby
* Arguments to the function are in between pipes
* The body of the closure goes in between curly brackets
* Just as with regular functions, if a line doesn't end with a semicolon, the
  value there will be returned

== Unique Things About Closures ==
* Closures do not require type annotations
  * Type annotations can be used, but the information would largly be
    redundant
  * This is because closures are not exposed to ensure everyone agrees on what
    type to use
  * Closures are usually short and relevant only within a narrow context
{{{rust
fn add_one_v1  (x: u32) -> u32 { x + 1 }
let add_one_v2 |x: u32| -> u32 { x + 1 };
let add_one_v3 |x|             { x + 1 };
let add_one_v4 |x|               x + 1  ;
}}}

* Closures can only be called with one type once they are defined
  * The following example will not compile
  * the compiler infers the type from the first call to the closure
  * the second call uses a different type and could produce unexpected results
{{{rust
let ex_cl = |x| x;
let s = ex_cl(String::from("hello"));
let n = ex_cl(5);
}}}

== Storing Closures Using Generic Parameters and the Fn Traits ==
memorization or lazy evaluation
* A struct can be used to store the closure and its result once it's been called
* *value* will be None before the *calculation* is executed
{{{rust
struct Cacher<T>
where
  T: Fn(u32) -> u32
{
  calculation: T,
  value: Option<u32>,
}

impl<T> Cacher<T>
where T: Fn(u32) -> u32
{
  fn new(calculation: T) -> Cacher<T> {
    Cacher {
      calculation,
      value: None,
    }
  }

  fn value(&mut self, arg: u32) -> u32 {
    match self.value {
      Some(v) => v,
        None => {
          let v = (self.calculation)(arg);
          self.value = Some(v);
          v
        },
    }
  }
}
}}}

=== Limits of This Implimentation ===
* This implimentation assumes the same value will always be passed
  * After the first execution, that result will be returned regardless of the
    argument passed to the function
  * Solution: modify value to hold a hash map for different values that have
    been passed to it


== Capturing the Environment with Closures ==
* Closures can access variables from the scope in which they are defined
{{{rust
let x = 4;
let equal_to_x = |z| z==x;
let y = 4;
assert!(equal_to_x(y));
}}}
* There are three ways closures can borrow from their environment:
  * FnOnce -- consumes the variables it captures from its enclosing scope
    * known as the closure's environment
    * to consume the captured variables, the closure must take ownership of the
      variables
    * Closures can't take ownership of the variables more than once
    * All closures implement FnOnce
  * FnMut -- can change the environment because it mutably borrows values
    * Closures that don't move captured variables also implement FnMut
  * Fn -- borrows values from the environment immutably
    * Closures that don't need mutable access to variables implement Fn
* *move* can force a closure to take ownership of a variable
  * most useful when a closure is passed to another thread so data moves with
    the closure
{{{rust
let x = vec![1, 2, 3];
let equal_to_x = mov |z| z==x;
println!("can't use x here: {:?}", x);
let y = vec![1, 2, 3];
assert!(equal_to_x(y));
}}}
